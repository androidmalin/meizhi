apply plugin: 'com.android.application'
//BugLy
apply plugin: 'bugly'
apply plugin: 'project-report'
apply plugin: 'com.getkeepsafe.dexcount'

bugly {
    appId = rootProject.ext.common.appId
    appKey = rootProject.ext.common.appKey
}

android {

    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        resConfigs "zh", "xxhdpi"
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
    }

    signingConfigs {
        myConfig {
            storeFile file(STOREFILE)
            //noinspection GroovyAssignabilityCheck
            storePassword STOREPASSWORD
            //noinspection GroovyAssignabilityCheck
            keyAlias KEYALIAS
            //noinspection GroovyAssignabilityCheck
            keyPassword KEYPASSWORD
        }
    }
    buildTypes {
        debug {
            //https://developer.android.com/studio/build/shrink-code.html#unused-alt-resources
            buildConfigField "boolean", "LOG_DEBUG", "true"
            minifyEnabled false// 不启用通过 ProGuard 实现的代码压缩,代码压缩会拖慢构建速度，避免在调试构建中使用
            shrinkResources false // 是否去除无效的资源文件
            zipAlignEnabled false
            // 优化Gradle编译速度，只能在Debug版本中使用，Release时一定不要使用
            // 禁用AAPT检查这一类的Task
            aaptOptions.cruncherEnabled = false
            aaptOptions.useNewCruncher = false
            //禁止 Link Task
            //也可以通过命令 gradle build -x lint 禁止Lint Task
            //Task耗时的命令 gradle build --profile 生成的文件在这里，在浏览器中打开即可。projectRootName/build/reports/profile/profile-xxxxxxx.html
            project.gradle.startParameter.excludedTaskNames.add('lint')
        }
        release {
            //https://developer.android.com/studio/build/shrink-code.html#unused-alt-resources
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //noinspection GroovyAssignabilityCheck
            debuggable false
            zipAlignEnabled true
            signingConfig signingConfigs.myConfig
            minifyEnabled true //启用通过 ProGuard 实现的代码压缩
            shrinkResources true // 去除无效的资源文件
            // proguard-android.txt 文件的位置 /sdk/tools/proguard/
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //Java编译版本
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    //打包忽略掉第三方jar相同的文件
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/CERT.SF'
        exclude 'META-INF/CERT.RSA'
        exclude 'META-INF/MANIFEST.MF'
    }

    lintOptions {
        lintConfig file("lint.xml")
        abortOnError false
        warning 'InvalidPackage'
        disable 'InvalidPackage'
    }

    //productFlavors领域，定义渠道名，使用manifestPlaceholders制定要替换渠道占位符的值。
    //增加productFlavors.all领域对所有的productFlavors进行遍历，并使用那么作为渠道名。这些name实际上就是xiaomi,BaiDu
    productFlavors {
        baidu {}
        nineone {}
        androidmarket {}
        xiaomi {
            minSdkVersion = rootProject.ext.android.minSdkVersionDebug
            versionCode = rootProject.ext.android.versionCodeDebug
            versionName = rootProject.ext.android.versionNameDebug
        }
        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }

    }

    //apk包重新命名
    applicationVariants.all { Variant ->
        Variant.outputs.each { output ->
            if (output.outputFile != null && output.outputFile.name.endsWith('.apk') && !Variant.buildType.debuggable) {
                def apkFile = new File(output.outputFile.getParent(), "Release_${Variant.flavorName}_v${Variant.versionName}.apk")
                output.outputFile = apkFile;
            }
            if (output.outputFile != null && output.outputFile.name.endsWith('.apk') && Variant.buildType.debuggable) {
                def apkFile = new File(output.outputFile.getParent(), "Debug_${Variant.flavorName}_v${Variant.versionName}.apk")
                output.outputFile = apkFile;
            }
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile rootProject.ext.dependencies["roundedimageview"]
    compile rootProject.ext.dependencies["appcompat-v7"]
    compile rootProject.ext.dependencies["cardview"]
    compile rootProject.ext.dependencies["recyclerview"]
    compile rootProject.ext.dependencies["design"]
    compile(rootProject.ext.dependencies["rxandroid"]) {
        exclude module: 'rxjava'
    }
    compile rootProject.ext.dependencies["rxjava"]
    compile rootProject.ext.dependencies["retrofit"]
    compile(rootProject.ext.dependencies["converter-gson"]) {
        exclude module: 'gson'
    }
    compile rootProject.ext.dependencies["gson"]
    compile rootProject.ext.dependencies["adapter-rxjava"]
    compile rootProject.ext.dependencies["okhttp"]
    compile rootProject.ext.dependencies["umeng"]
    compile(rootProject.ext.dependencies["fresco"]) {
        exclude module: 'support-core-utils'
        exclude module: 'support-compat'
        exclude module: 'support-annotations'
    }
    compile(rootProject.ext.dependencies["fresco:imagepipeline-okhttp3"]) {
        exclude module: 'support-core-utils'
        exclude module: 'support-compat'
        exclude module: 'support-annotations'
        exclude module: 'okhttp'
    }
    debugCompile rootProject.ext.dependencies["leakcanary-android"]
    releaseCompile rootProject.ext.dependencies["leakcanary-android-no-op"]
    compile rootProject.ext.dependencies["crashreport_upgrade"]
    compile project(':libimage')
}

//花费超过50ms的任务时间打印出来
//http://jiajixin.cn/2015/08/07/gradle-android/
//耗时统计文件在项目rootProject/build/taskTime.txt
class BuildTimeListener implements TaskExecutionListener, BuildListener {
    private org.gradle.internal.time.Clock clock
    private times = []

    @Override
    void beforeExecute(Task task) {
        clock = new Clock()
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        def ms = clock.timeInMs
        times.add([ms, task.path])
        //task.project.logger.warn "${task.path} spend ${ms}ms"
    }

    @Override
    void buildFinished(BuildResult result) {
        println "Task spend time:"
        File file = new File('build/taskTime.txt')
        if (!file.exists()) {
            File dir = new File(file.getParent())
            if (!dir.exists()) dir.mkdirs()
            file.createNewFile()
        } else {
            file.delete()
        }

        def printWriter = file.newPrintWriter()
        def timeFormat
        def timeString
        def taskNameString
        def mapArrayList = new ArrayList<>()

        for (time in times) {
            if (time[0] >= 50) {
                timeFormat = String.valueOf(time).replace("[", "").replace("]", "").replace(",", "ms,")
                time = timeFormat.split(",")[0].trim()
                if (time.length() <= 9) {
                    int diff = 9 - time.length()
                    for (int i = 0; i < diff; i++) {
                        time = time + " "
                    }
                }
                ArrayList<String> oneList = new ArrayList<>()
                taskNameString = timeFormat.split(",")[1].trim()
                oneList.clear()
                oneList.add(time)
                oneList.add(taskNameString)
                mapArrayList.add(oneList)
            }
        }

        Collections.sort(mapArrayList, new Comparator<ArrayList<String>>() {
            @Override
            int compare(ArrayList<String> o1, ArrayList<String> o2) {
                int msgId1 = Integer.valueOf(o1[0].replace("ms", "").trim())
                int msgId2 = Integer.valueOf(o2[0].replace("ms", "").trim())
                return msgId2.numberAwareCompareTo(msgId1)
            }
        })

        for (int i = 0; i < mapArrayList.size(); i++) {
            timeString = mapArrayList.get(i).get(0)
            taskNameString = mapArrayList.get(i).get(1)
            printWriter.write(timeString + taskNameString + "\n")
            printf "      " + timeString + taskNameString + "\n"

        }

        try {
            printWriter.flush()
            printWriter.close()
        } catch (Exception e) {
            e.printStackTrace()
        }
    }

    @Override
    void buildStarted(Gradle gradle) {}

    @Override
    void projectsEvaluated(Gradle gradle) {}

    @Override
    void projectsLoaded(Gradle gradle) {}

    @Override
    void settingsEvaluated(Settings settings) {}
}

project.gradle.addListener(new BuildTimeListener())


//dexCount
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.6.4'
    }
}