apply plugin: 'com.android.application'
//BugLy
apply plugin: 'bugly'
apply plugin: 'project-report'

bugly {
    appId = rootProject.ext.common.appId
    appKey = rootProject.ext.common.appKey
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        resConfigs "zh"
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
    }

    signingConfigs {
        myConfig {
            storeFile file(STOREFILE)
            //noinspection GroovyAssignabilityCheck
            storePassword STOREPASSWORD
            //noinspection GroovyAssignabilityCheck
            keyAlias KEYALIAS
            //noinspection GroovyAssignabilityCheck
            keyPassword KEYPASSWORD
        }
    }
    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            minifyEnabled false// 是否混淆
            shrinkResources false // 是否去除无效的资源文件

            // 优化Gradle编译速度，只能在Debug版本中使用，Release时一定不要使用
            // 禁用AAPT检查这一类的Task
            aaptOptions {
                cruncherEnabled = false
            }
            //禁止 Link Task
            //也可以通过命令 gradle build -x lint 禁止Lint Task
            //Task耗时的命令 gradle build -profile 生成的文件在这里，在浏览器中打开即可。bilibili/build/reports/profile/profile-xxxxxxx.html
            project.gradle.startParameter.excludedTaskNames.add('lint')
        }
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //noinspection GroovyAssignabilityCheck
            debuggable false
            zipAlignEnabled true
            signingConfig signingConfigs.myConfig
            minifyEnabled true
            shrinkResources true // 是否去除无效的资源文件
            // proguard-android.txt 文件的位置 /sdk/tools/proguard/
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //Java编译版本
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    //打包忽略掉第三方jar相同的文件
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/CERT.SF'
        exclude 'META-INF/CERT.RSA'
        exclude 'META-INF/MANIFEST.MF'
    }

    lintOptions {
        lintConfig file("lint.xml")
        abortOnError false
        warning 'InvalidPackage'
        disable 'InvalidPackage'
    }

    //productFlavors领域，定义渠道名，使用manifestPlaceholders制定要替换渠道占位符的值。
    productFlavors {
        BuglyTest {
            manifestPlaceholders = [CHANNEL_VALUE: "BuglyTest"]
            minSdkVersion = rootProject.ext.android.minSdkVersion
        }

        wandoujia {
            manifestPlaceholders = [CHANNEL_VALUE: "wandoujia"]
            minSdkVersion = rootProject.ext.android.minSdkVersion
        }
        googleplay {
            manifestPlaceholders = [CHANNEL_VALUE: "googleplay"]
            minSdkVersion = rootProject.ext.android.minSdkVersion
        }

        //测试渠道，正式发布，请不要使用这个字符串 xiaomi
        xiaomi {
            manifestPlaceholders = [CHANNEL_VALUE: "xiaomi"]
            minSdkVersion = rootProject.ext.android.minSdkVersionDebug
        }
    }

    //增加productFlavors.all领域对所有的productFlavors进行遍历，并使用那么作为渠道名。这些name实际上就是 wandoujia，googleplay，xiaomi
    productFlavors.all { Flavor ->
        Flavor.manifestPlaceholders = [CHANNEL_VALUE: name]
        def androidManifest = new XmlSlurper().parse("${project.rootDir}/app/src/main/AndroidManifest.xml")
        println androidManifest['@android:versionName']
    }

    //apk包重新命名
    applicationVariants.all { Variant ->
        Variant.outputs.each { output ->
            if (output.outputFile != null && output.outputFile.name.endsWith('.apk') && 'release'.equals(Variant.buildType.name)) {
                def apkFile = new File(output.outputFile.getParent(), "APP_Release_${Variant.flavorName}_v${Variant.versionName}.apk")
                output.outputFile = apkFile;
            }
            if (output.outputFile != null && output.outputFile.name.endsWith('.apk') && 'debug'.equals(Variant.buildType.name)) {
                def apkFile = new File(output.outputFile.getParent(), "app_Debug_${Variant.flavorName}_v${Variant.versionName}.apk")
                output.outputFile = apkFile;
            }
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile rootProject.ext.dependencies["appcompat-v7"]
    compile rootProject.ext.dependencies["cardview"]
    compile rootProject.ext.dependencies["recyclerview"]
    compile rootProject.ext.dependencies["design"]
    //RxJava
    compile rootProject.ext.dependencies["rxandroid"]
    compile rootProject.ext.dependencies["rxjava"]
    //Retrofit2
    compile rootProject.ext.dependencies["retrofit"]
    compile rootProject.ext.dependencies["converter-gson"]
    compile rootProject.ext.dependencies["adapter-rxjava"]
    //OkHttp
    compile rootProject.ext.dependencies["okhttp"]
    compile rootProject.ext.dependencies["umeng"]

    //Fresco
    compile(rootProject.ext.dependencies["fresco"]) {
        exclude module: 'support-core-utils'
        exclude module: 'support-compat'
        exclude module: 'support-annotations'
    }
    //Fresco-OkHttp3
    compile(rootProject.ext.dependencies["fresco:imagepipeline-okhttp3"]) {
        exclude module: 'support-core-utils'
        exclude module: 'support-compat'
        exclude module: 'support-annotations'
    }
    //LeakCanary
    debugCompile rootProject.ext.dependencies["leakcanary-android"]
    releaseCompile rootProject.ext.dependencies["leakcanary-android-no-op"]
    //BugLy
    compile rootProject.ext.dependencies["crashreport_upgrade"]
}
